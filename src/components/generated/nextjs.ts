// Code generated by wunderctl. DO NOT EDIT.

import type {
	createUserResponse,
	createUserInput,
	createUserResponseData,
	deleteMultiUserResponse,
	deleteMultiUserInput,
	deleteMultiUserResponseData,
	deleteUserResponse,
	deleteUserInput,
	deleteUserResponseData,
	getUserResponse,
	getUserInput,
	getUserResponseData,
	getUserByEmailResponse,
	getUserByEmailInput,
	getUserByEmailResponseData,
	listUserResponse,
	listUserInput,
	listUserResponseData,
	updateUserResponse,
	updateUserInput,
	updateUserResponseData,
	createShopResponse,
	createShopInput,
	createShopResponseData,
	deleteShopResponse,
	deleteShopInput,
	deleteShopResponseData,
	getShopResponse,
	getShopInput,
	getShopResponseData,
	listShopResponse,
	listShopInput,
	listShopResponseData,
	updateShopResponse,
	updateShopInput,
	updateShopResponseData,
	meResponse,
	meResponseData,
	updateProfileResponse,
	updateProfileInput,
	updateProfileResponseData,
} from "./models";
import { createContext } from "react";
import {
	QueryArgsWithInput,
	SubscriptionArgs,
	SubscriptionArgsWithInput,
	hooks,
	WunderGraphContextProperties,
	Client,
} from "@wundergraph/nextjs";

export type Role = "admin" | "user";

export enum AuthProvider {
	"storeo" = "storeo",
}

export const AuthProviders = {
	storeo: AuthProvider.storeo,
};

export enum S3Provider {}

const defaultWunderGraphContextProperties: WunderGraphContextProperties<Role> = {
	ssrCache: {},
	client: null,
	clientConfig: {
		applicationHash: "b620caeb",
		applicationPath: "app/main",
		baseURL: "http://localhost:9991",
		sdkVersion: "0.93.0",
	},
	user: null,
	setUser: (value) => {},
	isWindowFocused: "pristine",
	setIsWindowFocused: (value) => {},
	refetchMountedOperations: 0,
	setRefetchMountedOperations: (value) => {},
};

export const WunderGraphContext = createContext<WunderGraphContextProperties<Role>>(
	defaultWunderGraphContextProperties
);

export const withWunderGraph = hooks.withWunderGraphContextWrapper(
	WunderGraphContext,
	defaultWunderGraphContextProperties
);

export const useWunderGraph = hooks.useWunderGraph<Role, AuthProvider, S3Provider>(WunderGraphContext);

export const useQuery = {
	getUser: (args: QueryArgsWithInput<getUserInput>) =>
		hooks.useQueryWithInput<getUserInput, getUserResponseData, Role>(WunderGraphContext, {
			operationName: "getUser",
			requiresAuthentication: true,
		})(args),
	getUserByEmail: (args: QueryArgsWithInput<getUserByEmailInput>) =>
		hooks.useQueryWithInput<getUserByEmailInput, getUserByEmailResponseData, Role>(WunderGraphContext, {
			operationName: "getUserByEmail",
			requiresAuthentication: true,
		})(args),
	listUser: (args: QueryArgsWithInput<listUserInput>) =>
		hooks.useQueryWithInput<listUserInput, listUserResponseData, Role>(WunderGraphContext, {
			operationName: "listUser",
			requiresAuthentication: true,
		})(args),
	getShop: (args: QueryArgsWithInput<getShopInput>) =>
		hooks.useQueryWithInput<getShopInput, getShopResponseData, Role>(WunderGraphContext, {
			operationName: "getShop",
			requiresAuthentication: true,
		})(args),
	listShop: (args: QueryArgsWithInput<listShopInput>) =>
		hooks.useQueryWithInput<listShopInput, listShopResponseData, Role>(WunderGraphContext, {
			operationName: "listShop",
			requiresAuthentication: true,
		})(args),
	me: hooks.useQueryWithoutInput<meResponseData, Role>(WunderGraphContext, {
		operationName: "me",
		requiresAuthentication: true,
	}),
};

export const useMutation = {
	createUser: () =>
		hooks.useMutationWithInput<createUserInput, createUserResponseData, Role>(WunderGraphContext, {
			operationName: "createUser",
			requiresAuthentication: true,
		}),
	deleteMultiUser: () =>
		hooks.useMutationWithInput<deleteMultiUserInput, deleteMultiUserResponseData, Role>(WunderGraphContext, {
			operationName: "deleteMultiUser",
			requiresAuthentication: true,
		}),
	deleteUser: () =>
		hooks.useMutationWithInput<deleteUserInput, deleteUserResponseData, Role>(WunderGraphContext, {
			operationName: "deleteUser",
			requiresAuthentication: true,
		}),
	updateUser: () =>
		hooks.useMutationWithInput<updateUserInput, updateUserResponseData, Role>(WunderGraphContext, {
			operationName: "updateUser",
			requiresAuthentication: true,
		}),
	createShop: () =>
		hooks.useMutationWithInput<createShopInput, createShopResponseData, Role>(WunderGraphContext, {
			operationName: "createShop",
			requiresAuthentication: true,
		}),
	deleteShop: () =>
		hooks.useMutationWithInput<deleteShopInput, deleteShopResponseData, Role>(WunderGraphContext, {
			operationName: "deleteShop",
			requiresAuthentication: true,
		}),
	updateShop: () =>
		hooks.useMutationWithInput<updateShopInput, updateShopResponseData, Role>(WunderGraphContext, {
			operationName: "updateShop",
			requiresAuthentication: true,
		}),
	updateProfile: () =>
		hooks.useMutationWithInput<updateProfileInput, updateProfileResponseData, Role>(WunderGraphContext, {
			operationName: "updateProfile",
			requiresAuthentication: true,
		}),
};

export const useSubscription = {};

export const useLiveQuery = {
	getUser: (args: SubscriptionArgsWithInput<getUserInput>) =>
		hooks.useSubscriptionWithInput<getUserInput, getUserResponseData, Role>(WunderGraphContext, {
			operationName: "getUser",
			isLiveQuery: true,
			requiresAuthentication: true,
		})(args),
	getUserByEmail: (args: SubscriptionArgsWithInput<getUserByEmailInput>) =>
		hooks.useSubscriptionWithInput<getUserByEmailInput, getUserByEmailResponseData, Role>(WunderGraphContext, {
			operationName: "getUserByEmail",
			isLiveQuery: true,
			requiresAuthentication: true,
		})(args),
	listUser: (args: SubscriptionArgsWithInput<listUserInput>) =>
		hooks.useSubscriptionWithInput<listUserInput, listUserResponseData, Role>(WunderGraphContext, {
			operationName: "listUser",
			isLiveQuery: true,
			requiresAuthentication: true,
		})(args),
	getShop: (args: SubscriptionArgsWithInput<getShopInput>) =>
		hooks.useSubscriptionWithInput<getShopInput, getShopResponseData, Role>(WunderGraphContext, {
			operationName: "getShop",
			isLiveQuery: true,
			requiresAuthentication: true,
		})(args),
	listShop: (args: SubscriptionArgsWithInput<listShopInput>) =>
		hooks.useSubscriptionWithInput<listShopInput, listShopResponseData, Role>(WunderGraphContext, {
			operationName: "listShop",
			isLiveQuery: true,
			requiresAuthentication: true,
		})(args),
	me: (args?: SubscriptionArgs) =>
		hooks.useSubscriptionWithoutInput<meResponseData, Role>(WunderGraphContext, {
			operationName: "me",
			isLiveQuery: true,
			requiresAuthentication: true,
		})(args),
};

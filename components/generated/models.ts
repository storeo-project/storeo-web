// Code generated by wunderctl. DO NOT EDIT.

export interface createUserInput {
	data: db_userCreateInput;
}

export interface deleteMultiUserInput {
	ids: number[];
}

export interface deleteUserInput {
	id: number;
}

export interface getUserInput {
	id: number;
}

export interface getUserByEmailInput {
	email: string;
}

export interface listUserInput {
	skip: number;
	limit: number;
}

export interface checkUserInput {
	email: string;
}

export interface getOrganizationUserInput {
	organizationId: number;
	userId: number;
	role?: string;
}

export interface registerUserInput {
	email: string;
	firstName: string;
	lastName: string;
}

export interface createOrganizationInput {
	name: string;
	description: string;
}

export interface deleteOrganizationInput {
	id: number;
}

export interface updateOrganizationInput {
	id: number;
	name: string;
	description: string;
}

export interface createUserResponse {
	data?: createUserResponseData;
	errors?: ReadonlyArray<GraphQLError>;
}

export interface deleteMultiUserResponse {
	data?: deleteMultiUserResponseData;
	errors?: ReadonlyArray<GraphQLError>;
}

export interface deleteUserResponse {
	data?: deleteUserResponseData;
	errors?: ReadonlyArray<GraphQLError>;
}

export interface getUserResponse {
	data?: getUserResponseData;
	errors?: ReadonlyArray<GraphQLError>;
}

export interface getUserByEmailResponse {
	data?: getUserByEmailResponseData;
	errors?: ReadonlyArray<GraphQLError>;
}

export interface listUserResponse {
	data?: listUserResponseData;
	errors?: ReadonlyArray<GraphQLError>;
}

export interface checkUserResponse {
	data?: checkUserResponseData;
	errors?: ReadonlyArray<GraphQLError>;
}

export interface getOrganizationUserResponse {
	data?: getOrganizationUserResponseData;
	errors?: ReadonlyArray<GraphQLError>;
}

export interface registerUserResponse {
	data?: registerUserResponseData;
	errors?: ReadonlyArray<GraphQLError>;
}

export interface createOrganizationResponse {
	data?: createOrganizationResponseData;
	errors?: ReadonlyArray<GraphQLError>;
}

export interface deleteOrganizationResponse {
	data?: deleteOrganizationResponseData;
	errors?: ReadonlyArray<GraphQLError>;
}

export interface listOrganizationResponse {
	data?: listOrganizationResponseData;
	errors?: ReadonlyArray<GraphQLError>;
}

export interface updateOrganizationResponse {
	data?: updateOrganizationResponseData;
	errors?: ReadonlyArray<GraphQLError>;
}

export interface meResponse {
	data?: meResponseData;
	errors?: ReadonlyArray<GraphQLError>;
}

export interface createUserResponseData {
	user?: {
		id: number;
	};
}

export interface deleteMultiUserResponseData {
	users?: {
		count: number;
	};
}

export interface deleteUserResponseData {
	user?: {
		id: number;
	};
}

export interface getUserResponseData {
	user?: {
		id: number;
		email: string;
		phoneNumber: string;
		firstName: string;
		lastName: string;
		organizations?: {
			organization: {
				name: string;
			};
		}[];
	};
}

export interface getUserByEmailResponseData {
	user?: {
		id: number;
		email: string;
		phoneNumber: string;
		firstName: string;
		lastName: string;
		organizations?: {
			organization: {
				name: string;
			};
		}[];
	};
}

export interface listUserResponseData {
	users: {
		id: number;
		email: string;
		phoneNumber: string;
		firstName: string;
		lastName: string;
	}[];
	user_aggregate: {
		total?: {
			_all: number;
		};
	};
}

export interface checkUserResponseData {
	user?: {
		id: number;
	};
}

export interface getOrganizationUserResponseData {
	value?: {
		organization: {
			id: number;
		};
	};
}

export interface registerUserResponseData {
	user?: {
		id: number;
	};
}

export interface createOrganizationResponseData {
	organization?: {
		id: number;
		name: string;
		description: string;
	};
}

export interface deleteOrganizationResponseData {
	organization?: {
		id: number;
	};
}

export interface listOrganizationResponseData {
	items: {
		id: number;
		name: string;
		description: string;
	}[];
}

export interface updateOrganizationResponseData {
	db_updateOneorganization?: {
		id: number;
	};
}

export interface meResponseData {
	user?: {
		id: number;
		email: string;
		phoneNumber: string;
		firstName: string;
		lastName: string;
	};
}

export interface db_userCreateInput {
	email: string;
	phoneNumber?: string;
	firstName?: string;
	lastName?: string;
	avatar?: string;
	organization_user?: db_organization_userCreateNestedManyWithoutUserInput;
}

export interface db_organization_userCreateNestedManyWithoutUserInput {
	create?: db_organization_userCreateWithoutUserInput;
	connectOrCreate?: db_organization_userCreateOrConnectWithoutUserInput;
	createMany?: db_organization_userCreateManyUserInputEnvelope;
	connect?: db_organization_userWhereUniqueInput;
}

export interface db_organization_userCreateWithoutUserInput {
	assignedAt?: string;
	assignedBy?: string;
	organizationRole?: string;
	organization?: db_organizationCreateNestedOneWithoutOrganization_userInput;
}

export interface db_organizationCreateNestedOneWithoutOrganization_userInput {
	create?: db_organizationCreateWithoutOrganization_userInput;
	connectOrCreate?: db_organizationCreateOrConnectWithoutOrganization_userInput;
	connect?: db_organizationWhereUniqueInput;
}

export interface db_organizationCreateWithoutOrganization_userInput {
	name?: string;
	description?: string;
	deleted?: boolean;
}

export interface db_organizationCreateOrConnectWithoutOrganization_userInput {
	where?: db_organizationWhereUniqueInput;
	create?: db_organizationCreateWithoutOrganization_userInput;
}

export interface db_organizationWhereUniqueInput {
	id?: number;
}

export interface db_organization_userCreateOrConnectWithoutUserInput {
	where?: db_organization_userWhereUniqueInput;
	create?: db_organization_userCreateWithoutUserInput;
}

export interface db_organization_userWhereUniqueInput {
	userId_organizationId?: db_organization_userUserIdOrganizationIdCompoundUniqueInput;
}

export interface db_organization_userUserIdOrganizationIdCompoundUniqueInput {
	userId?: number;
	organizationId?: number;
}

export interface db_organization_userCreateManyUserInputEnvelope {
	data?: db_organization_userCreateManyUserInput[];
	skipDuplicates?: boolean;
}

export interface db_organization_userCreateManyUserInput {
	organizationId?: number;
	assignedAt?: string;
	assignedBy?: string;
	organizationRole?: string;
}

export type JSONValue = string | number | boolean | JSONObject | Array<JSONValue>;

export type JSONObject = { [key: string]: JSONValue };

export interface GraphQLError {
	message: string;
	path?: ReadonlyArray<string | number>;
}
